menu(menuAlarmStat) {
    choice(menuAlarmStatNO_ALARM, "NO_ALARM")
    choice(menuAlarmStatREAD, "READ")
    choice(menuAlarmStatWRITE, "WRITE")
    choice(menuAlarmStatHIHI, "HIHI")
    choice(menuAlarmStatHIGH, "HIGH")
    choice(menuAlarmStatLOLO, "LOLO")
    choice(menuAlarmStatLOW, "LOW")
    choice(menuAlarmStatSTATE, "STATE")
    choice(menuAlarmStatCOS, "COS")
    choice(menuAlarmStatCOMM, "COMM")
    choice(menuAlarmStatTIMEOUT, "TIMEOUT")
    choice(menuAlarmStatHWLIMIT, "HWLIMIT")
    choice(menuAlarmStatCALC, "CALC")
    choice(menuAlarmStatSCAN, "SCAN")
    choice(menuAlarmStatLINK, "LINK")
    choice(menuAlarmStatSOFT, "SOFT")
    choice(menuAlarmStatBAD_SUB, "BAD_SUB")
    choice(menuAlarmStatUDF, "UDF")
    choice(menuAlarmStatDISABLE, "DISABLE")
    choice(menuAlarmStatSIMM, "SIMM")
    choice(menuAlarmStatREAD_ACCESS, "READ_ACCESS")
    choice(menuAlarmStatWRITE_ACCESS, "WRITE_ACCESS")
}
menu(menuAlarmSevr) {
    choice(menuAlarmSevrNO_ALARM, "NO_ALARM")
    choice(menuAlarmSevrMINOR, "MINOR")
    choice(menuAlarmSevrMAJOR, "MAJOR")
    choice(menuAlarmSevrINVALID, "INVALID")
}
menu(menuConvert) {
    choice(menuConvertNO_CONVERSION, "NO CONVERSION")
    choice(menuConvertSLOPE, "SLOPE")
    choice(menuConvertLINEAR, "LINEAR")
    choice(menuConverttypeKdegF, "typeKdegF")
    choice(menuConverttypeKdegC, "typeKdegC")
    choice(menuConverttypeJdegF, "typeJdegF")
    choice(menuConverttypeJdegC, "typeJdegC")
    choice(menuConverttypeEdegF, "typeEdegF(ixe only)")
    choice(menuConverttypeEdegC, "typeEdegC(ixe only)")
    choice(menuConverttypeTdegF, "typeTdegF")
    choice(menuConverttypeTdegC, "typeTdegC")
    choice(menuConverttypeRdegF, "typeRdegF")
    choice(menuConverttypeRdegC, "typeRdegC")
    choice(menuConverttypeSdegF, "typeSdegF")
    choice(menuConverttypeSdegC, "typeSdegC")
}
menu(menuOmsl) {
    choice(menuOmslsupervisory, "supervisory")
    choice(menuOmslclosed_loop, "closed_loop")
}
menu(menuPriority) {
    choice(menuPriorityLOW, "LOW")
    choice(menuPriorityMEDIUM, "MEDIUM")
    choice(menuPriorityHIGH, "HIGH")
}
menu(menuScan) {
    choice(menuScanPassive, "Passive")
    choice(menuScanEvent, "Event")
    choice(menuScanI_O_Intr, "I/O Intr")
    choice(menuScan10_second, "10 second")
    choice(menuScan5_second, "5 second")
    choice(menuScan2_second, "2 second")
    choice(menuScan1_second, "1 second")
    choice(menuScan_5_second, ".5 second")
    choice(menuScan_2_second, ".2 second")
    choice(menuScan_1_second, ".1 second")
}
menu(menuIvoa) {
    choice(menuIvoaContinue_normally, "Continue normally")
    choice(menuIvoaDon_t_drive_outputs, "Don't drive outputs")
    choice(menuIvoaSet_output_to_IVOV, "Set output to IVOV")
}
menu(menuFtype) {
    choice(menuFtypeSTRING, "STRING")
    choice(menuFtypeCHAR, "CHAR")
    choice(menuFtypeUCHAR, "UCHAR")
    choice(menuFtypeSHORT, "SHORT")
    choice(menuFtypeUSHORT, "USHORT")
    choice(menuFtypeLONG, "LONG")
    choice(menuFtypeULONG, "ULONG")
    choice(menuFtypeINT64, "INT64")
    choice(menuFtypeUINT64, "UINT64")
    choice(menuFtypeFLOAT, "FLOAT")
    choice(menuFtypeDOUBLE, "DOUBLE")
    choice(menuFtypeENUM, "ENUM")
}
menu(menuPini) {
    choice(menuPiniNO, "NO")
    choice(menuPiniYES, "YES")
    choice(menuPiniRUN, "RUN")
    choice(menuPiniRUNNING, "RUNNING")
    choice(menuPiniPAUSE, "PAUSE")
    choice(menuPiniPAUSED, "PAUSED")
}
menu(menuYesNo) {
    choice(menuYesNoNO, "NO")
    choice(menuYesNoYES, "YES")
}
menu(menuPost) {
    choice(menuPost_OnChange, "On Change")
    choice(menuPost_Always, "Always")
}
menu(menuSimm) {
    choice(menuSimmNO, "NO")
    choice(menuSimmYES, "YES")
    choice(menuSimmRAW, "RAW")
}
recordtype(arr) {
    %#include "epicsTypes.h"
    %#include "link.h"
    %#include "epicsMutex.h"
    %#include "ellLib.h"
    %#include "devSup.h"
    %#include "epicsTime.h"
    field(NAME, DBF_STRING) {
        size(61)
        special(SPC_NOMOD)
        prompt("Record Name")
    }
    field(DESC, DBF_STRING) {
        size(41)
        promptgroup("10 - Common")
        prompt("Descriptor")
    }
    field(ASG, DBF_STRING) {
        size(29)
        promptgroup("10 - Common")
        special(SPC_AS)
        prompt("Access Security Group")
    }
    field(SCAN, DBF_MENU) {
        prompt("Scan Mechanism")
        promptgroup("20 - Scan")
        special(SPC_SCAN)
        menu(menuScan)
        interest(1)
    }
    field(PINI, DBF_MENU) {
        interest(1)
        menu(menuPini)
        promptgroup("20 - Scan")
        prompt("Process at iocInit")
    }
    field(PHAS, DBF_SHORT) {
        interest(1)
        prompt("Scan Phase")
        promptgroup("20 - Scan")
        special(SPC_SCAN)
    }
    field(EVNT, DBF_STRING) {
        prompt("Event Name")
        promptgroup("20 - Scan")
        special(SPC_SCAN)
        interest(1)
        size(40)
    }
    field(TSE, DBF_SHORT) {
        interest(1)
        prompt("Time Stamp Event")
        promptgroup("20 - Scan")
    }
    field(TSEL, DBF_INLINK) {
        promptgroup("20 - Scan")
        prompt("Time Stamp Link")
        interest(1)
    }
    field(DTYP, DBF_DEVICE) {
        prompt("Device Type")
        promptgroup("10 - Common")
        interest(1)
    }
    field(DISV, DBF_SHORT) {
        initial("1")
        prompt("Disable Value")
        promptgroup("20 - Scan")
    }
    field(DISA, DBF_SHORT) {
        prompt("Disable")
    }
    field(SDIS, DBF_INLINK) {
        prompt("Scanning Disable")
        promptgroup("20 - Scan")
        interest(1)
    }
    field(MLOK, DBF_NOACCESS) {
        interest(4)
        extra("epicsMutexId        mlok")
        prompt("Monitor lock")
        special(SPC_NOMOD)
    }
    field(MLIS, DBF_NOACCESS) {
        special(SPC_NOMOD)
        prompt("Monitor List")
        extra("ELLLIST             mlis")
        interest(4)
    }
    field(BKLNK, DBF_NOACCESS) {
        interest(4)
        extra("ELLLIST             bklnk")
        prompt("Backwards link tracking")
        special(SPC_NOMOD)
    }
    field(DISP, DBF_UCHAR) {
        prompt("Disable putField")
    }
    field(PROC, DBF_UCHAR) {
        interest(3)
        prompt("Force Processing")
        pp(TRUE)
    }
    field(STAT, DBF_MENU) {
        special(SPC_NOMOD)
        prompt("Alarm Status")
        initial("UDF")
        menu(menuAlarmStat)
    }
    field(SEVR, DBF_MENU) {
        prompt("Alarm Severity")
        special(SPC_NOMOD)
        menu(menuAlarmSevr)
    }
    field(NSTA, DBF_MENU) {
        special(SPC_NOMOD)
        prompt("New Alarm Status")
        menu(menuAlarmStat)
        interest(2)
    }
    field(NSEV, DBF_MENU) {
        special(SPC_NOMOD)
        prompt("New Alarm Severity")
        menu(menuAlarmSevr)
        interest(2)
    }
    field(ACKS, DBF_MENU) {
        interest(2)
        menu(menuAlarmSevr)
        prompt("Alarm Ack Severity")
        special(SPC_NOMOD)
    }
    field(ACKT, DBF_MENU) {
        interest(2)
        menu(menuYesNo)
        initial("YES")
        prompt("Alarm Ack Transient")
        special(SPC_NOMOD)
        promptgroup("70 - Alarm")
    }
    field(DISS, DBF_MENU) {
        promptgroup("70 - Alarm")
        prompt("Disable Alarm Sevrty")
        menu(menuAlarmSevr)
        interest(1)
    }
    field(LCNT, DBF_UCHAR) {
        interest(2)
        special(SPC_NOMOD)
        prompt("Lock Count")
    }
    field(PACT, DBF_UCHAR) {
        special(SPC_NOMOD)
        prompt("Record active")
        interest(1)
    }
    field(PUTF, DBF_UCHAR) {
        interest(1)
        prompt("dbPutField process")
        special(SPC_NOMOD)
    }
    field(RPRO, DBF_UCHAR) {
        interest(1)
        prompt("Reprocess ")
        special(SPC_NOMOD)
    }
    field(ASP, DBF_NOACCESS) {
        interest(4)
        extra("struct asgMember    *asp")
        special(SPC_NOMOD)
        prompt("Access Security Pvt")
    }
    field(PPN, DBF_NOACCESS) {
        interest(4)
        extra("struct processNotify *ppn")
        prompt("pprocessNotify")
        special(SPC_NOMOD)
    }
    field(PPNR, DBF_NOACCESS) {
        prompt("pprocessNotifyRecord")
        special(SPC_NOMOD)
        extra("struct processNotifyRecord *ppnr")
        interest(4)
    }
    field(SPVT, DBF_NOACCESS) {
        special(SPC_NOMOD)
        prompt("Scan Private")
        extra("struct scan_element *spvt")
        interest(4)
    }
    field(RSET, DBF_NOACCESS) {
        extra("struct typed_rset   *rset")
        prompt("Address of RSET")
        special(SPC_NOMOD)
        interest(4)
    }
    field(DSET, DBF_NOACCESS) {
        interest(4)
        extra("unambiguous_dset    *dset")
        prompt("DSET address")
        special(SPC_NOMOD)
    }
    field(DPVT, DBF_NOACCESS) {
        extra("void                *dpvt")
        prompt("Device Private")
        special(SPC_NOMOD)
        interest(4)
    }
    field(RDES, DBF_NOACCESS) {
        interest(4)
        special(SPC_NOMOD)
        prompt("Address of dbRecordType")
        extra("struct dbRecordType *rdes")
    }
    field(LSET, DBF_NOACCESS) {
        prompt("Lock Set")
        special(SPC_NOMOD)
        extra("struct lockRecord   *lset")
        interest(4)
    }
    field(PRIO, DBF_MENU) {
        prompt("Scheduling Priority")
        promptgroup("20 - Scan")
        special(SPC_SCAN)
        menu(menuPriority)
        interest(1)
    }
    field(TPRO, DBF_UCHAR) {
        prompt("Trace Processing")
    }
    field(BKPT, DBF_NOACCESS) {
        interest(1)
        extra("epicsUInt8          bkpt")
        prompt("Break Point")
        special(SPC_NOMOD)
    }
    field(UDF, DBF_UCHAR) {
        initial("1")
        interest(1)
        prompt("Undefined")
        pp(TRUE)
        promptgroup("10 - Common")
    }
    field(UDFS, DBF_MENU) {
        prompt("Undefined Alarm Sevrty")
        promptgroup("70 - Alarm")
        interest(1)
        menu(menuAlarmSevr)
        initial("INVALID")
    }
    field(TIME, DBF_NOACCESS) {
        special(SPC_NOMOD)
        prompt("Time")
        extra("epicsTimeStamp      time")
        interest(2)
    }
    field(FLNK, DBF_FWDLINK) {
        prompt("Forward Process Link")
        promptgroup("20 - Scan")
        interest(1)
    }
    field(VAL, DBF_NOACCESS) {
        extra("void *val")
        special(SPC_DBADDR)
        pp(TRUE)
        prompt("Value")
    }
    field(NELM, DBF_ULONG) {
        initial("1")
        prompt("Number of Elements")
        special(SPC_NOMOD)
    }
    field(FTVL, DBF_MENU) {
        menu(menuFtype)
        special(SPC_NOMOD)
        prompt("Field Type of Value")
    }
    field(NORD, DBF_ULONG) {
        special(SPC_NOMOD)
        prompt("Number elements read")
    }
    field(OFF, DBF_ULONG) {
        prompt("Offset into array")
    }
    field(BPTR, DBF_NOACCESS) {
        extra("void *bptr")
        special(SPC_NOMOD)
        prompt("Buffer Pointer")
    }
    field(INP, DBF_INLINK) {
        prompt("Input Link")
    }
    field(CLBK, DBF_NOACCESS) {
        extra("void (*clbk)(struct arrRecord*)")
        prompt("Processing callback")
        special(SPC_NOMOD)
    }
}
